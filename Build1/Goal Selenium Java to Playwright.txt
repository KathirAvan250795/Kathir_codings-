Goal: Selenium Java to Playwright Typescript code

Instructions:

-Use Playwright v1.56+ syntax and best practices for TypeScript.
-Preserve all original test steps exactly—do not add, remove, or modify any logical steps from the source.
-Use the same locators as defined in the Selenium Java code (e.g., if the Java code uses By.id("foo"), use "#foo" in Playwright).
-Do not hardcode sleep or waitForTimeout—use Playwright’s built-in auto-waiting mechanisms (e.g., await page.locator(...).click()).
-If a Selenium Java feature has no direct equivalent in Playwright TypeScript, insert a comment: // not implemented.
-Include clear comments in the TypeScript code to explain each step, mirroring the intent of the original Java code.
-The output must be valid Playwright TypeScript—not generic TypeScript or pseudocode.
-Keep the timeout as 60 seconds.
-Make Playwright not to click cancel button in alert automatically (by default it clicks cancel button).

Context
-You are an AI assistant specialized in test automation migration.
-Your task is to accurately translate legacy Selenium Java test scripts into modern, idiomatic Playwright TypeScript scripts.

Convert the below Java Selenium code to Typescript Playwright :
package tests;

import io.github.bonigarcia.wdm.WebDriverManager;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class LoginTest {

    private WebDriver driver;
    private WebDriverWait wait;

    @BeforeClass
    public void setupDriver() {
        WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        wait = new WebDriverWait(driver, 10);
    }

    @Test
    public void performLogin() {
        driver.get("https://www.example.com/login");
        WebElement usernameInput = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@data-test='username']"))
        );
        usernameInput.sendKeys("your-username");
        WebElement passwordInput = wait.until(
                ExpectedConditions.visibilityOfElementLocated(By.xpath("//input[@data-test='password']"))
        );
        passwordInput.sendKeys("your-password");
        WebElement loginButton = wait.until(
                ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='login-button' and @type='submit']"))
        );
        loginButton.click();
    }

    @AfterClass
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }
}

Example :
import { test, expect } from '@playwright/test';

test('has title', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Expect a title "to contain" a substring.
  await expect(page).toHaveTitle(/Playwright/);
});

test('get started link', async ({ page }) => {
  await page.goto('https://playwright.dev/');

  // Click the get started link.
  await page.getByRole('link', { name: 'Get started' }).click();

  // Expects page to have a heading with the name of Installation.
  await expect(page.getByRole('heading', { name: 'Installation' })).toBeVisible();
});


Output :


import { test, expect } from '@playwright/test';
import { chromium, Browser, BrowserContext, Page } from 'playwright';

test.setTimeout(60_000);

let browser: Browser;
let context: BrowserContext;
let page: Page;

test.describe('LoginTest (Playwright translation)', () => {
  test.beforeAll(async () => {
    browser = await chromium.launch({ headless: true });
    context = await browser.newContext({ viewport: null });
    page = await context.newPage();
    page.setDefaultTimeout(60_000);

    // Robust dialog handler: dismiss and fail deterministically
    page.on('dialog', async (dialog) => {
      try { await dialog.dismiss(); } catch (e) { /* ignore dismiss errors */ }
      throw new Error(`Unhandled dialog appeared (type=${dialog.type()}): ${dialog.message()}`);
    });
  });

  test('performLogin', async () => {
    await page.goto('https://www.saucedemo.com/');

    const usernameLocator = page.locator(`xpath=//input[@data-test='username']`);
    await expect(usernameLocator).toBeVisible({ timeout: 60_000 });
    await usernameLocator.fill('standard_user');

    const passwordLocator = page.locator(`xpath=//input[@data-test='password']`);
    await expect(passwordLocator).toBeVisible({ timeout: 60_000 });
    await passwordLocator.fill('secret_sauce');

    const loginButton = page.locator(`xpath=//input[@id='login-button' and @type='submit']`);
    await expect(loginButton).toBeVisible({ timeout: 60_000 });

    await Promise.all([
      page.waitForNavigation({ waitUntil: 'networkidle' }),
      loginButton.click(),
    ]);

    // Validate successful login
    await expect(page).toHaveURL(/.*inventory.html/, { timeout: 60_000 });
    // or: await expect(page.locator('.inventory_list')).toBeVisible();
  });

  test.afterAll(async () => {
    try { if (page && !page.isClosed()) await page.close(); } catch (e) { /* ignore */ }
    try { if (context) await context.close(); } catch (e) { /* ignore */ }
    try { if (browser) await browser.close(); } catch (e) { /* ignore */ }
  });
});
